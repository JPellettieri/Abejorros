# Primero fijamos una semilla aleatoria (set.seed), para que siempre genere las mismas
# muestras:
set.seed(25)
# Si por ejemplo queremos 3 muestras de tamaño 15, generamos 3 vectores con 15 valores c/u.
# Cada vector (tratamiento) tiene diferente media (Y.raya), pero el mismo desvío estándar,
# ya que queremos no rechazar el supuesto de homocedasticidad:
A <- rnorm(15,18,3.2)
B <- rnorm(15,25,3.2)
C <- rnorm(15,22,3.2)
# La VARIABLE RESPUESTA se genera uniendo los tres vectores:
y <- as.numeric(c(A,B,C))
# Ahora debemos generar la VARIABLE EXPLICATIVA (X) o factor, con sus tres niveles o
# tratamientos (A,B,C):
tratamiento <- c(rep("A",15),rep("B",15),rep("C",15))
tratamiento<-as.factor(tratamiento)
BD_ortogonales <- data.frame(tratamiento, y)
# Hagamos una estadística descriptiva para visualizar la información que contiene:
plot(BD_ortogonales)
# Observamos la cantidad de niveles del factor y el orden que figuran en la base de datos
# para definir los coeficientes de cada nivel:
table(BD_ortogonales$tratamiento)
# Primero debemos probar la ortogonalidad de los contrastes (se realiza para cada par de
# contrastes):
f1 <- c(2,-1,-1)
f2 <- c(0,1,-1)
sum(f1*f2)
# Generamos una matriz con los coeficientes en columnas:
matriz<-cbind(f1,f2)
# La función "cbind" agrega los vectores como columnas de una matriz.
matriz
# Ahora agregamos los contrastes a la base de datos
contrasts(BD_ortogonales$tratamiento) <- matriz
# Y corremos el ANOVA.
# ACLARACIÓN: para poder hacer los contrastes ortogonales, hay que ejecutar el ANOVA con la
# función aov().
modelo <- aov(y ~ tratamiento, data = BD_ortogonales)
# Ahora corremos los contrastes ortogonales:
summary(modelo, split = list(tratamiento = list("A vs el resto" = 1, "B vs C" = 2)))
# Con la función "split()" descomponemos la suma de cuadrados (SC) "entre tratamientos" del
# ¿Qué valor obtenemos si sumamos la SC de los contrastes ortogonales ("Sum Sq" de cada
# Primero debemos probar la ortogonalidad de los contrastes (se realiza para cada par de
# contrastes):
f1 <- c(2,-1,-1)
f2 <- c(0,1,-1)
sum(f1*f2)
# Generamos una matriz con los coeficientes en columnas:
matriz<-cbind(f1,f2)
# La función "cbind" agrega los vectores como columnas de una matriz.
matriz
# Ahora agregamos los contrastes a la base de datos
contrasts(BD_ortogonales$tratamiento) <- matriz
# Y corremos el ANOVA.
# ACLARACIÓN: para poder hacer los contrastes ortogonales, hay que ejecutar el ANOVA con la
# función aov().
modelo <- aov(y ~ tratamiento, data = BD_ortogonales)
# Ahora corremos los contrastes ortogonales:
summary(modelo, split = list(tratamiento = list("A vs el resto" = 1, "B vs C" = 2)))
# ¿Qué valor obtenemos si sumamos la SC de los contrastes ortogonales ("Sum Sq" de cada
# contraste)?
sum Sq
# ¿Cómo se puede concluir estadísticamente en este caso hipotético?
# Recordar que previamente debemos poner a prueba los supuestos.
tapply(BD_ortogonales$y,BD_ortogonales$tratamiento,summary)
setwd("F:\Juli\Documents\Eco Comunidades")
Coord<-read.table("Coord.txt")
Amb=read.table("amb.txt", header = T, row.names = 1, dec = ",")
#Librerias
library(pastecs)
install.packages("corrplot") #quitar el "numeral" del principio e instalar el paquete si no esta
install.packages("pastecs")
##### Paquetes que vamos necesitando los importamos aca ####
install.packages("car")
##### Paquetes que vamos necesitando los importamos aca ####
#install.packages("car")
#install.packages("dplyr")
#install.packages("emmeans")
#install.packages("ggplot")
library ("car")
library ("dplyr")
library ("emmeans")
library ("ggplot")
##### Paquetes que vamos necesitando los importamos aca ####
#install.packages("car")
#install.packages("dplyr")
#install.packages("emmeans")
#install.packages("ggplot")
library ("car")
##### Paquetes que vamos necesitando los importamos aca ####
#install.packages("car")
#install.packages("dplyr")
#install.packages("emmeans")
install.packages("ggplot")
version
##Me tiro error por no tener la ultima version, con esto lo actualizo.
version
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx")
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx")
View(Datos)
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx")
View(Datos)
Datos <- read_excel("Datos prueba.xlsx")
summary (Datos)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx",header = TRUE)
Datos <- read_excel("Datos prueba.xlsx",header = TRUE)
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx",header = TRUE)
Datos <- read_excel("Datos prueba.xlsx", header = TRUE)
Datos <- read_excel("Datos prueba.xlsx",col_names = TRUE)
summary (Datos)
View(Datos)
Datos <- read_excel("Datos prueba.xlsx",col_names = TRUE)
summary (Datos)
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx",col_names = TRUE)
summary (Datos)
Datos$Tratamiento
Datos$Tratamiento
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
df <- df %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Cargar librerías
library(readxl)
library(dplyr)
library(ggplot2)
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
df <- df %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Cargar el archivo Excel
ruta_archivo <- "ruta/a/tu/archivo/Datos prueba.xlsx"
df <- read_excel(ruta_archivo, sheet = "Limpio")
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
df <- df %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
library(dplyr)
library(ggplot2)
# Cargar el archivo Excel
ruta_archivo <- "ruta/a/tu/archivo/Datos prueba.xlsx"
df <- read_excel(ruta_archivo, sheet = "Limpio")
df<- read_excel("Datos prueba.xlsx",col_names = TRUE,  sheet = "Limpio")
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
df <- df %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Filtrar para eliminar los registros con menos de 3 veces tomando la recompensa y los que murieron (Muere = 1)
df_filtrado <- df %>%
filter(T_count >= 3, Muere != 1)
# Calcular el índice de supervivencia según el tratamiento
df_supervivencia <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Sobreviven = sum(Muere == 0),
Total = n(),
Supervivencia = Sobreviven / Total)
# Mostrar la tabla de supervivencia
print(df_supervivencia)
# Calcular el índice de supervivencia según el tratamiento
df_supervivencia <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Sobreviven = sum(Muere == 0),
Total = n(),
Supervivencia = Sobreviven / Total)
# Mostrar la tabla de supervivencia
print(df_supervivencia)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
View(df_filtrado)
library(readxl)
setwd("F:/Juli/Documents/Abejorros y Abejas/Abejorros")
Datos <- read_excel("Datos prueba.xlsx",col_names = TRUE,  sheet = "Limpio")
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
Datos <- Datos %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
View(Datos)
# Filtrar para eliminar los registros con menos de 3 veces tomando la recompensa
Datos_filtrado <-Datos%>%
filter(T_count >= 3)
# Calcular el índice de supervivencia según el tratamiento
df_supervivencia <- Datos_filtrado  %>%
group_by(Tratamiento) %>%
summarise(Sobreviven = sum(Muere == 0),
Total = n(),
Supervivencia = Sobreviven / Total)
# Mostrar la tabla de supervivencia
print(df_supervivencia)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
Datos <- read_excel("Datos prueba.xlsx",col_names = TRUE,  sheet = "Limpio")
summary (Datos)
Datos$Tratamiento
# Cargar librerías
library(readxl)
library(dplyr)
library(ggplot2)
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
Datos <- Datos %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Filtrar para eliminar los registros con menos de 3 veces tomando la recompensa
Datos_filtrado <-Datos%>%
filter(T_count >= 3)
# Calcular el índice de supervivencia según el tratamiento
df_supervivencia <- Datos_filtrado  %>%
group_by(Tratamiento) %>%
summarise(Sobreviven = sum(Muere == 0),
Total = n(),
Supervivencia = Sobreviven / Total)
# Mostrar la tabla de supervivencia
print(df_supervivencia)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
Datos <- Datos %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
# Calcular cuántos de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n())
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
library(dplyr)
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
Datos <- Datos %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, LIO 24 hs == 1, NONA 24 hs == 0)
# Calcular cuántos de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n())
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- df %>%
filter(T_count >= 3, Muere == 0, `LIO 24 hs` == 1, `NONA 24 hs` == 0)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- df %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
View(Datos)
print(class(Datos))
# Contar el número de veces que los abejorros tomaron la recompensa (T) en las exposiciones (E1 a E6)
Datos <- Datos %>%
rowwise() %>%
mutate(T_count = sum(c_across(E1:E6) == "T"))
# Graficar la supervivencia según el tratamiento
ggplot(df_supervivencia, aes(x = Tratamiento, y = Supervivencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Índice de Supervivencia según el Tratamiento",
x = "Tratamiento",
y = "Supervivencia (%)") +
theme_minimal()
-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
#-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0, `LIO 24hs` == 1, `NONA 24 hs` == 0)
# Calcular cuántos de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n())
# Mostrar la tabla de respuestas según el tratamiento
print(df_respuesta)
# Graficar las respuestas según el tratamiento
library(ggplot2)
ggplot(df_respuesta, aes(x = Tratamiento, y = Responden)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Abejorros que respondieron 1 en LIO 24hs y 0 en NONA 24hs",
x = "Tratamiento",
y = "Número de respuestas") +
theme_minimal()
# Calcular el porcentaje de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n(),
Total = n_distinct(ID),  # Suponiendo que cada abejorro tiene un ID único
Porcentaje = (Responden / Total) * 100)
# Graficar las respuestas en porcentaje según el tratamiento
library(ggplot2)
ggplot(df_respuesta, aes(x = Tratamiento, y = Porcentaje)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Porcentaje de Abejorros que respondieron 1 en LIO 24hs y 0 en NONA 24hs",
x = "Tratamiento",
y = "Porcentaje (%)") +
theme_minimal()
# Calcular el porcentaje de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n(),
Total = n_distinct(N),  # Reemplazar "Abejorro" por el nombre correcto de la columna
Porcentaje = (Responden / Total) * 100)
# Mostrar la tabla de respuestas en porcentaje según el tratamiento
print(df_respuesta)
# Graficar las respuestas en porcentaje según el tratamiento
library(ggplot2)
ggplot(df_respuesta, aes(x = Tratamiento, y = Porcentaje)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Porcentaje de Abejorros que respondieron 1 en LIO 24hs y 0 en NONA 24hs",
x = "Tratamiento",
y = "Porcentaje (%)") +
theme_minimal()
#-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0,`NONA 24 hs` == 0)
# Calcular el porcentaje de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden = n(),
Total = n_distinct(N),  # Reemplazar "Abejorro" por el nombre correcto de la columna
Porcentaje = (Responden / Total) * 100)
#-----------------------------------------------------------------------
# Filtrar para los que tomaron al menos 3 veces, sobrevivieron, y cumplieron con las condiciones de LIO y NONA
df_filtrado <- Datos %>%
filter(T_count >= 3, Muere == 0,`NONA 24 hs` == 0)
# Calcular el porcentaje de los que cumplen esas condiciones según el tratamiento
df_respuesta <- df_filtrado %>%
group_by(Tratamiento) %>%
summarise(Responden =  `LIO 24hs` == 1,
Total = n_distinct(N),  # Reemplazar "Abejorro" por el nombre correcto de la columna
Porcentaje = (Responden / Total) * 100)
# Mostrar la tabla de respuestas en porcentaje según el tratamiento
print(df_respuesta)
# Graficar las respuestas en porcentaje según el tratamiento
library(ggplot2)
ggplot(df_respuesta, aes(x = Tratamiento, y = Porcentaje)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Porcentaje de Abejorros que respondieron 1 en LIO 24hs y 0 en NONA 24hs",
x = "Tratamiento",
y = "Porcentaje (%)") +
theme_minimal()
#------------------------------------------
## Modelo ##
install.packages("lme4")
library(lme4)
#------------------------------------------
## Modelo ##
install.packages("lme4")
#------------------------------------------
## Modelo ##
install.packages("lme4")
library(lme4)
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer(LIO_24hs ~ Tratamiento + (1 | Nido),
family = binomial(link = "logit"),
data =df_respuesta)
install.packages("lme4")
install.packages("lme4")
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer(LIO_24hs ~ Tratamiento + (1 | Nido),
family = binomial(link = "logit"),
data =df_respuesta)
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer(LIO 24hs ~ Tratamiento + (1 | Nido),
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( Datos$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial(link = "logit"),
data =df_respuesta)
View(df_respuesta)
View(df_filtrado)
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial(link = "logit"),
data =df_filtrado)
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = "binomial (link = "logit")",
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial(link = "logit"), data = df_filtrado)
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial, data = df_filtrado)
## Modelo ##
install.packages("lme4")
install.packages("lme4")
# Asegurarte de que la columna LIO 24 hs sea numérica o convertirla a binaria
df_filtrado <- df_filtrado %>%
mutate(LIO_24hs = as.numeric(`LIO 24 hs` == 1))
# Asegurarte de que la columna LIO 24 hs sea numérica o convertirla a binaria
df_filtrado <- df_filtrado %>%
mutate(LIO_24hs = as.numeric(`LIO 24 hs` == 1))
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial, data = df_filtrado)
# Asegurarte de que la columna LIO 24 hs sea numérica o convertirla a binaria
df_filtrado <- df_filtrado %>%
mutate(LIO_24hs = as.numeric(`LIO 24 hs`))
# Asegurarte de que la columna LIO 24 hs sea numérica o convertirla a binaria
df_filtrado <- df_filtrado %>%
mutate(`LIO 24hs` = as.numeric(`LIO 24hs`))
# Ajustar el modelo mixto logístico
modelo_mixto <- glmer( df_filtrado$`LIO 24hs` ~ Tratamiento + (1 | Nido),
family = binomial, data = df_filtrado)
